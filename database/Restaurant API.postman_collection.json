{
	"info": {
		"_postman_id": "905e5cb8-66ab-4033-b93c-ff333886f46f",
		"name": "Restaurant API",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33704141"
	},
	"item": [
		{
			"name": "Food",
			"item": [
				{
					"name": "All Foods",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6Imx1Y3lAZ21haWwuY29tIiwiRmlyc3RfbmFtZSI6Ikx1Y3kiLCJMYXN0X25hbWUiOiJjaGFwcGllIiwiVWlkIjoiNjVmOTE1MTg2YzU1Zjg1MjczMzc1MmI4IiwiZXhwIjoxNzEwOTA5MDgwfQ.BeOyxMLsOeQtQa6oFY9lSZbEyB5e27C43eBih1Iebx0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/foods",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"foods"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Food",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6Imx1Y3lAZ21haWwuY29tIiwiRmlyc3RfbmFtZSI6Ikx1Y3kiLCJMYXN0X25hbWUiOiJjaGFwcGllIiwiVWlkIjoiNjVmOTE1MTg2YzU1Zjg1MjczMzc1MmI4IiwiZXhwIjoxNzEwOTA5MDgwfQ.BeOyxMLsOeQtQa6oFY9lSZbEyB5e27C43eBih1Iebx0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/foods/65f9486587ff8bae08fe4c28",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"foods",
								"65f9486587ff8bae08fe4c28"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Create Food",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6Imx1Y3lAZ21haWwuY29tIiwiRmlyc3RfbmFtZSI6Ikx1Y3kiLCJMYXN0X25hbWUiOiJjaGFwcGllIiwiVWlkIjoiNjVmOTE1MTg2YzU1Zjg1MjczMzc1MmI4IiwiZXhwIjoxNzEwOTA5MDgwfQ.BeOyxMLsOeQtQa6oFY9lSZbEyB5e27C43eBih1Iebx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Burger\",\r\n    \"price\": 3000,\r\n    \"menu_id\": \"65f939e048ab56f0ad6235ea\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/foods",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"foods"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Food",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6Imx1Y3lAZ21haWwuY29tIiwiRmlyc3RfbmFtZSI6Ikx1Y3kiLCJMYXN0X25hbWUiOiJjaGFwcGllIiwiVWlkIjoiNjVmOTE1MTg2YzU1Zjg1MjczMzc1MmI4IiwiZXhwIjoxNzEwOTA5MDgwfQ.BeOyxMLsOeQtQa6oFY9lSZbEyB5e27C43eBih1Iebx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Burger\",\r\n    \"price\": 3000,\r\n    \"menu_id\": \"65f939e048ab56f0ad6235ea\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/foods",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"foods"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Signup",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Lucy\",\r\n    \"last_name\": \"chappie\",\r\n    \"password\" : \"123456\",\r\n    \"email\" : \"lucy@gmail.com\",\r\n    \"phone\" : \"85530928230\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/foods",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"foods"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Menu",
			"item": [
				{
					"name": "All Menus",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6IiIsIkZpcnN0X25hbWUiOiIiLCJMYXN0X25hbWUiOiIiLCJVaWQiOiIiLCJleHAiOjE3MTE0MzYwMDZ9.5Q2DNTGdN3E6q82f1Az5puFOSH4wJ1sSyLBm94w4Kcw",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/menus",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"menus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Menu",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6Imx1Y3lAZ21haWwuY29tIiwiRmlyc3RfbmFtZSI6Ikx1Y3kiLCJMYXN0X25hbWUiOiJjaGFwcGllIiwiVWlkIjoiNjVmOTE1MTg2YzU1Zjg1MjczMzc1MmI4IiwiZXhwIjoxNzEwOTA5MDgwfQ.BeOyxMLsOeQtQa6oFY9lSZbEyB5e27C43eBih1Iebx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Chicken Soup\",\r\n    \"category\" : \"Soup\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/menus",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"menus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Menu",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6Imx1Y3lAZ21haWwuY29tIiwiRmlyc3RfbmFtZSI6Ikx1Y3kiLCJMYXN0X25hbWUiOiJjaGFwcGllIiwiVWlkIjoiNjVmOTE1MTg2YzU1Zjg1MjczMzc1MmI4IiwiZXhwIjoxNzEwOTA5MDgwfQ.BeOyxMLsOeQtQa6oFY9lSZbEyB5e27C43eBih1Iebx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Noodle & Burger\",\r\n    \"category\": \"Lunch\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/menus/65f9419e48ab56f0ad6235eb",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"menus",
								"65f9419e48ab56f0ad6235eb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Menu",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6Imx1Y3lAZ21haWwuY29tIiwiRmlyc3RfbmFtZSI6Ikx1Y3kiLCJMYXN0X25hbWUiOiJjaGFwcGllIiwiVWlkIjoiNjVmOTE1MTg2YzU1Zjg1MjczMzc1MmI4IiwiZXhwIjoxNzEwOTA5MDgwfQ.BeOyxMLsOeQtQa6oFY9lSZbEyB5e27C43eBih1Iebx0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/menus/65f9419e48ab56f0ad6235eb",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"menus",
								"65f9419e48ab56f0ad6235eb"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Table",
			"item": [
				{
					"name": "Create Table",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6Imx1Y3lAZ21haWwuY29tIiwiRmlyc3RfbmFtZSI6Ikx1Y3kiLCJMYXN0X25hbWUiOiJjaGFwcGllIiwiVWlkIjoiNjVmOTE1MTg2YzU1Zjg1MjczMzc1MmI4IiwiZXhwIjoxNzEwOTA5MDgwfQ.BeOyxMLsOeQtQa6oFY9lSZbEyB5e27C43eBih1Iebx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"number_of_guests\": 3,\r\n \"table_number\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tables",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tables"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Table",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6Imx1Y3lAZ21haWwuY29tIiwiRmlyc3RfbmFtZSI6Ikx1Y3kiLCJMYXN0X25hbWUiOiJjaGFwcGllIiwiVWlkIjoiNjVmOTE1MTg2YzU1Zjg1MjczMzc1MmI4IiwiZXhwIjoxNzEwOTA5MDgwfQ.BeOyxMLsOeQtQa6oFY9lSZbEyB5e27C43eBih1Iebx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"number_of_guests\": 4,\r\n \"table_number\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tables/65f9655f62d3cbe1153e2e04",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tables",
								"65f9655f62d3cbe1153e2e04"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Table",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6Imx1Y3lAZ21haWwuY29tIiwiRmlyc3RfbmFtZSI6Ikx1Y3kiLCJMYXN0X25hbWUiOiJjaGFwcGllIiwiVWlkIjoiNjVmOTE1MTg2YzU1Zjg1MjczMzc1MmI4IiwiZXhwIjoxNzEwOTA5MDgwfQ.BeOyxMLsOeQtQa6oFY9lSZbEyB5e27C43eBih1Iebx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tables/65f9655f62d3cbe1153e2e04",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tables",
								"65f9655f62d3cbe1153e2e04"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Tables",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6Imx1Y3lAZ21haWwuY29tIiwiRmlyc3RfbmFtZSI6Ikx1Y3kiLCJMYXN0X25hbWUiOiJjaGFwcGllIiwiVWlkIjoiNjVmOTE1MTg2YzU1Zjg1MjczMzc1MmI4IiwiZXhwIjoxNzEwOTA5MDgwfQ.BeOyxMLsOeQtQa6oFY9lSZbEyB5e27C43eBih1Iebx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tables",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tables"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order Item",
			"item": [
				{
					"name": "Create Table Copy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6Imx1Y3lAZ21haWwuY29tIiwiRmlyc3RfbmFtZSI6Ikx1Y3kiLCJMYXN0X25hbWUiOiJjaGFwcGllIiwiVWlkIjoiNjVmOTE1MTg2YzU1Zjg1MjczMzc1MmI4IiwiZXhwIjoxNzEwOTA5MDgwfQ.BeOyxMLsOeQtQa6oFY9lSZbEyB5e27C43eBih1Iebx0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"table_id\": \"65f9654062d3cbe1153e2e02\",\r\n \"order_items\": [{ }]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orderItems",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orderItems"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "localhost:8080"
		}
	]
}